@model TimeManagement.ViewModel.BillingModel
@{
    ViewBag.Title = "MTS Internal Billing Accounts Reconciliation";
}
<script type="text/javascript">
    function datevalidate() {
        var fromdate = $('#fromdate').val();
        var todate = $('#todate').val();

        if ((Date.parse(fromdate) > Date.parse(todate))) {
            alert("To Date should be greater than From date.");
            document.getElementById("todate").value = "";
            return false;
        }
        return Validation('InternalBilling');
        return true;

    }
    $(document).ready(function () {

        //Export button click event on batch list page
        $("#btnExport").click(function () {
            location.href = '@Url.Content("~/Report/ExportBillingDetails")';
        });

        $("#fromdate").change(function () {
            var fromdate = $('#fromdate').val();
            if (fromdate == "") {
                $('#fdate').removeClass('hidden');
                return false;
            } else if (fromdate != "") {
                $('#fdate').addClass('hidden');
                return false;
            }
            return true;

        });

        $("#todate").change(function () {
            var todate = $('#todate').val();
            if (todate == "") {
                $('#tdate').removeClass('hidden');
                return false;
            } else if (todate != "") {
                $('#tdate').addClass('hidden');
                return false;
            }
            return true;

        });

    });
    function fundate() {
        var fromdate = $('#fromdate').val();
        var todate = $('#todate').val();
        if ((fromdate == "") && (todate == "")) {
            $('#fdate').removeClass('hidden');
            $('#tdate').removeClass('hidden');
            return false;
        } else if ((fromdate != "") && (todate == "")) {
            $('#fdate').addClass('hidden');
            $('#tdate').removeClass('hidden');
            return false;
        } else if ((fromdate == "") && (todate != "")) {
            $('#fdate').removeClass('hidden');
            $('#tdate').addClass('hidden');
            return false;
        }
        if (datevalidate() == false) {
            return false;
        }
        return true;
    }

    $(document).ready(function () {

        oTable = $('#MTSInternalbilling').dataTable({
            "fnDrawCallback": function (oSettings) {
                if (oSettings.aiDisplay.length == 0) {
                    return;
                }

                var nTrs = $('#MTSInternalbilling tbody tr');
                var iColspan = nTrs[0].getElementsByTagName('td').length;
                var GroupText;
                var TotalHours = 0;
                var TotalCost = 0;
                var TotalPayableAmount = 0;
                var TotalBillableAmount = 0;
                var TotalMargin = 0;
                var SubPayableAmount = 0;
                var SubBillableAmount = 0;
                var SubMargin = 0;
                var SubTotalHours = 0;
                var SubTotalCost = 0;
                var sLastGroup = "";
                for (var i = 0; i < nTrs.length; i++) {
                    var iDisplayIndex = oSettings._iDisplayStart + i;

                    var sGroup = oSettings.aoData[oSettings.aiDisplay[iDisplayIndex]]._aData[0];
                    var SHours = oSettings.aoData[oSettings.aiDisplay[iDisplayIndex]]._aData[6];
                    var SCost = oSettings.aoData[oSettings.aiDisplay[iDisplayIndex]]._aData[7];
                    var SPayableAmount = oSettings.aoData[oSettings.aiDisplay[iDisplayIndex]]._aData[8];
                    var SBillableAmount = oSettings.aoData[oSettings.aiDisplay[iDisplayIndex]]._aData[9];
                    var SAMargin = oSettings.aoData[oSettings.aiDisplay[iDisplayIndex]]._aData[10];

                    //                    var Nextvalue = iDisplayIndex == nTrs.length - 1 ? iDisplayIndex : iDisplayIndex + 1;
                    //                    var NextGroup = oSettings.aoData[oSettings.aiDisplay[Nextvalue]]._aData[0];
                    var Nextvalue = iDisplayIndex == nTrs.length - 1 ? iDisplayIndex : iDisplayIndex + 1;
                    sLastGroup = i == 0 && nTrs.length == 1 ? oSettings.aoData[oSettings.aiDisplay[Nextvalue - 1]]._aData[0] : i == 0 ? oSettings.aoData[oSettings.aiDisplay[Nextvalue]]._aData[0] : sLastGroup;

                    if (sGroup != sLastGroup) {

                        var nGroup = document.createElement('tr');
                        var nCell = document.createElement('td');
                        var nhours = document.createElement('td');
                        var nCost = document.createElement('td');
                        var SPAmount = document.createElement('td');
                        var SBIAmount = document.createElement('td');
                        var SMargin = document.createElement('td');
                        nCell.colSpan = 5;
                        nCell.className = "strong";
                        nhours.className = "strong";
                        nCost.className = "strong";
                        SPAmount.className = "strong";
                        SBIAmount.className = "strong";
                        SMargin.className = "strong";
                        nCell.innerHTML = GroupText;
                        nhours.innerHTML = SubTotalHours.toFixed(2);
                        nCost.innerHTML = "$" + SubTotalCost.toFixed(2);
                        SPAmount.innerHTML = "$" + SubPayableAmount.toFixed(2);
                        SBIAmount.innerHTML = "$" + SubBillableAmount.toFixed(2);
                        SMargin.innerHTML = "$" + SubMargin.toFixed(2);
                        nGroup.appendChild(nCell);
                        nGroup.appendChild(nhours);
                        nGroup.appendChild(nCost);
                        nGroup.appendChild(SPAmount);
                        nGroup.appendChild(SBIAmount);
                        nGroup.appendChild(SMargin);
                        nTrs[i].parentNode.insertBefore(nGroup, nTrs[i]);
                        if (nTrs.length == i + 1) {
                            TotalHours = parseFloat(TotalHours) + parseFloat(SubTotalHours) + parseFloat(SHours)
                            TotalCost = parseFloat(TotalCost) + parseFloat(SubTotalCost) + parseFloat(SCost.substr(1, SCost.length))
                            TotalPayableAmount = parseFloat(TotalPayableAmount) + parseFloat(SubPayableAmount) + parseFloat(SPayableAmount.substr(1, SPayableAmount.length));
                            TotalBillableAmount = parseFloat(TotalBillableAmount) + parseFloat(SubBillableAmount) + parseFloat(SBillableAmount.substr(1, SBillableAmount.length));
                            TotalMargin = parseFloat(TotalMargin) + parseFloat(SubMargin) + parseFloat(SAMargin.substr(1, SAMargin.length));
                        }
                        else {
                            TotalHours = parseFloat(TotalHours) + parseFloat(SubTotalHours)
                            TotalCost = parseFloat(TotalCost) + parseFloat(SubTotalCost)
                            TotalPayableAmount = parseFloat(TotalPayableAmount) + parseFloat(SubPayableAmount);
                            TotalBillableAmount = parseFloat(TotalBillableAmount) + parseFloat(SubBillableAmount);
                            TotalMargin = parseFloat(TotalMargin) + parseFloat(SubMargin);
                        }
                        if (nTrs.length == i + 1) {
                            var TotalGroup = document.createElement('tr');
                            var TCell = document.createElement('td');
                            var Thours = document.createElement('td');
                            var TCost = document.createElement('td');
                            var TPAmount = document.createElement('td');
                            var TBIAmount = document.createElement('td');
                            var TMargin = document.createElement('td');
                            TCell.colSpan = 5;
                            TCell.className = "strongBig";
                            Thours.className = "strongBig";
                            TCost.className = "strongBig";
                            TPAmount.className = "strongBig";
                            TBIAmount.className = "strongBig";
                            TMargin.className = "strongBig";
                            TCell.innerHTML = "Total";
                            Thours.innerHTML = TotalHours.toFixed(2);
                            TCost.innerHTML = "$" + TotalCost.toFixed(2);
                            TPAmount.innerHTML = "$" + TotalPayableAmount.toFixed(2);
                            TBIAmount.innerHTML = "$" + TotalBillableAmount.toFixed(2);
                            TMargin.innerHTML = "$" + TotalMargin.toFixed(2);
                            TotalGroup.appendChild(TCell);
                            TotalGroup.appendChild(Thours);
                            TotalGroup.appendChild(TCost);
                            TotalGroup.appendChild(TPAmount);
                            TotalGroup.appendChild(TBIAmount);
                            TotalGroup.appendChild(TMargin);
                            $("#MTSInternalbilling").find("tbody tr:last").after(TotalGroup);
                            SubTotalHours = 0;
                            SubTotalCost = 0;
                            SubPayableAmount = 0;
                            SubBillableAmount = 0;
                            SubMargin = 0;
                        }
                        else {
                            SubTotalHours = parseFloat(SHours)
                            SubTotalCost = parseFloat(SCost.substr(1, SCost.length))
                            SubPayableAmount = parseFloat(SPayableAmount.substr(1, SPayableAmount.length));
                            SubBillableAmount = parseFloat(SBillableAmount.substr(1, SBillableAmount.length));
                            SubMargin = parseFloat(SAMargin.substr(1, SAMargin.length));
                        }
                        sLastGroup = sGroup;
                    }
                    else {

                        SubTotalHours = parseFloat(SubTotalHours) + parseFloat(SHours)
                        SubTotalCost = parseFloat(SubTotalCost) + parseFloat(SCost.substr(1, SCost.length))
                        SubPayableAmount = parseFloat(SubPayableAmount) + parseFloat(SPayableAmount.substr(1, SPayableAmount.length));
                        SubBillableAmount = parseFloat(SubBillableAmount) + parseFloat(SBillableAmount.substr(1, SBillableAmount.length));
                        SubMargin = parseFloat(SubMargin) + parseFloat(SAMargin.substr(1, SAMargin.length));
                        GroupText = "Sub Total for " + sGroup;
                        if (nTrs.length == i + 1) {
                            var nGroup = document.createElement('tr');
                            var nCell = document.createElement('td');
                            var nhours = document.createElement('td');
                            var nCost = document.createElement('td');
                            var SPAmount = document.createElement('td');
                            var SBIAmount = document.createElement('td');
                            var SMargin = document.createElement('td');
                            nCell.colSpan = 5;
                            nCell.className = "strong";
                            nhours.className = "strong";
                            nCost.className = "strong";
                            SPAmount.className = "strong";
                            SBIAmount.className = "strong";
                            SMargin.className = "strong";
                            nCell.innerHTML = GroupText;
                            nhours.innerHTML = SubTotalHours.toFixed(2);
                            nCost.innerHTML = "$" + SubTotalCost.toFixed(2);
                            SPAmount.innerHTML = "$" + SubPayableAmount.toFixed(2);
                            SBIAmount.innerHTML = "$" + SubBillableAmount.toFixed(2);
                            SMargin.innerHTML = "$" + SubMargin.toFixed(2);
                            nGroup.appendChild(nCell);
                            nGroup.appendChild(nhours);
                            nGroup.appendChild(nCost);
                            nGroup.appendChild(SPAmount);
                            nGroup.appendChild(SBIAmount);
                            nGroup.appendChild(SMargin);
                            $("#MTSInternalbilling").find("tbody tr:last").after(nGroup);
                            TotalHours = parseFloat(TotalHours) + parseFloat(SubTotalHours)
                            TotalCost = parseFloat(TotalCost) + parseFloat(SubTotalCost)
                            TotalPayableAmount = parseFloat(TotalPayableAmount) + parseFloat(SubPayableAmount);
                            TotalBillableAmount = parseFloat(TotalBillableAmount) + parseFloat(SubBillableAmount);
                            TotalMargin = parseFloat(TotalMargin) + parseFloat(SubMargin);
                            SubTotalHours = 0;
                            SubTotalCost = 0;
                            SubPayableAmount = 0;
                            SubBillableAmount = 0;
                            SubMargin = 0;
                            var TotalGroup = document.createElement('tr');
                            var TCell = document.createElement('td');
                            var Thours = document.createElement('td');
                            var TCost = document.createElement('td');
                            var TPAmount = document.createElement('td');
                            var TBIAmount = document.createElement('td');
                            var TMargin = document.createElement('td');
                            TCell.colSpan = 5;
                            TCell.className = "strongBig";
                            Thours.className = "strongBig";
                            TCost.className = "strongBig";
                            TPAmount.className = "strongBig";
                            TBIAmount.className = "strongBig";
                            TMargin.className = "strongBig";
                            TCell.innerHTML = "Total";
                            Thours.innerHTML = TotalHours.toFixed(2);
                            TCost.innerHTML = "$" + TotalCost.toFixed(2);
                            TPAmount.innerHTML = "$" + TotalPayableAmount.toFixed(2);
                            TBIAmount.innerHTML = "$" + TotalBillableAmount.toFixed(2);
                            TMargin.innerHTML = "$" + TotalMargin.toFixed(2);
                            TotalGroup.appendChild(TCell);
                            TotalGroup.appendChild(Thours);
                            TotalGroup.appendChild(TCost);
                            TotalGroup.appendChild(TPAmount);
                            TotalGroup.appendChild(TBIAmount);
                            TotalGroup.appendChild(TMargin);
                            $("#MTSInternalbilling").find("tbody tr:last").after(TotalGroup);

                        }
                    }

                }
            },
            "aoColumnDefs": [
			{ "bVisible": false, "aTargets": [0] }
		],
            "aaSortingFixed": [[0, 'asc']],
            "aaSorting": [[0, 'asc']],
            "bPaginate": false,
            "sDom": 'lfr<"giveHeight"t>ip'
        });
    });

</script>
<div class="row">
    <div class="boxshade">
        <div class="boxhead">
            MTS Internal Billing Accounts Reconciliation Report
        </div>
        <div class="boxbody">
            <div class="col-lg-12 pad10 gap-bottom10" style="background-color: #F5F5F5;">
                <div class="col-lg-12 gap-bottom10">
                    @using (Html.BeginForm("MTSInternalbilling", "Report", FormMethod.Post, new { @class = "form-inline" }))
                    {
                        <div class="col-lg-2">
                            <div class="col-lg-12 pad0 gap-bottom5">
                                <b>From Date</b></div>
                            <div class="col-lg-12 pad0">
                                <input type="text" class="form-control datePicker required" id="fromdate" placeholder="From"
                                    name="fromDate" id="txtfromdate" />
                                <div id="fdate" class="hidden requi">
                                    From Date Required</div>
                            </div>
                        </div>
                 
                        <div class="col-lg-2">
                            <div class="col-lg-12 pad0 gap-bottom5">
                                <b>To Date</b></div>
                            <div class="col-lg-12 pad0">
                                <input type="text" class="form-control datePicker required" id="todate" placeholder="To" name="toDate"
                                    id="txttodate" />
                                <div id="tdate" class="hidden requi">
                                    To Date Required</div>
                            </div>
                        </div>
                        <div class="col-lg-12 gap-top5">
                            <button type="submit" class="btn btn-info pull-right gap-right10" onclick="return fundate()">
                                Submit</button>
                        </div>
                        
                        
                       
                    }
                </div>
                <div class="col-lg-12">
                    <span style="font-size: 12px">@ViewBag.Message</span>
                </div>
            </div>
            @if (Model != null && Model.Summary.Count > 0)
            {
                <div class="col-lg-12 gap-bottom10">
                    <table id="MTSInternalbilling" class="table table-striped table-bordered" style="font-size: 12px">
                        <thead>
                            <tr>
                                <th style="background-color: #2481B7; color: #FFF">
                                    GroupBy
                                </th>
                                <th style="background-color: #2481B7; color: #FFF">
                                    Company
                                </th>
                                <th style="background-color: #2481B7; color: #FFF">
                                    Consultant
                                </th>
                                <th style="background-color: #2481B7; color: #FFF">
                                    Task
                                </th>
                                <th style="background-color: #2481B7; color: #FFF">
                                    Cost/Hr
                                </th>
                                <th style="background-color: #2481B7; color: #FFF">
                                    Rate/Hr
                                </th>
                                <th style="background-color: #2481B7; color: #FFF">
                                    Hours
                                </th>
                                <th style="background-color: #2481B7; color: #FFF">
                                    Cost
                                </th>
                                <th style="background-color: #2481B7; color: #FFF">
                                    Payable Amount
                                </th>
                                <th style="background-color: #2481B7; color: #FFF">
                                    Billable Amount
                                </th>
                                <th style="background-color: #2481B7; color: #FFF">
                                    Margin
                                </th>
                            </tr>
                        </thead>
                        @{
                decimal total = 0;
                foreach (TimeManagement.Domain.WorkSummary workSummary in Model.Summary)
                {
                    total = 0;
                        
                            <tr>
                                <td style="text-align: right">@workSummary.Company
                                </td>
                                <td style="text-align: left">@workSummary.Company
                                </td>
                                <td style="text-align: left">@workSummary.Employee
                                </td>
                                <td style="text-align: left">@workSummary.WorkCode
                                </td>
                                <td style="text-align: right">@workSummary.Costperhour
                                </td>
                                <td style="text-align: right">
                                    $@workSummary.BillRate
                                </td>
                                <td style="text-align: center">@workSummary.Hours
                                </td>
                                <td style="text-align: right">
                                    $@String.Format("{0:0.00}", workSummary.TotalCost)
                                </td>
                                <td style="text-align: right">
                                    $@String.Format("{0:0.00}", workSummary.PayableAmount)
                                </td>
                                <td style="text-align: right">
                                    $@String.Format("{0:0.00}", workSummary.BillableAmount)
                                </td>
                                <td style="text-align: right">
                                    $@String.Format("{0:0.00}", workSummary.Margin)
                                </td>
                            </tr>
			       
                }
                        }
                    </table>
                </div>
                <div class="col-lg-12 gap-bottom10">
                    <button type="button" class="btn btn-success  pull-right gap-right10" id="btnExport">
                        Export</button>
                </div>
            }
            
        </div>
